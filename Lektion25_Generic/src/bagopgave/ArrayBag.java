package bagopgave;import java.util.Arrays;import java.util.Random;public class ArrayBag<T> implements Bag<T>{    private final T[] arrayBag;    private int size;    public ArrayBag(){        arrayBag = (T[]) new Object[10];        size = 0;    }    @Override    public int getCurrentSize() {        return size;    }    @Override    public boolean isFull() {        return size == arrayBag.length;    }    @Override    public boolean isEmpty() {        return size == 0;    }    @Override    public boolean add(T newEntry) {        boolean added = false;        int i = 0;        while (!added && i < arrayBag.length){            if (arrayBag[i] == null){                arrayBag[i] = newEntry;                size++;                added = true;            }            i++;        }        return added;    }    @Override    public T remove() {        Random random = new Random();        T removed = null;        while (removed == null && !isEmpty()) {            int pos = random.nextInt(arrayBag.length);            removed = arrayBag[pos];            arrayBag[pos] = null;        }        size--;        return removed;    }    @Override    public boolean remove(T anEntry)    {        boolean found = false;        int i = 0;        while (!found && i < arrayBag.length){            if (arrayBag[i].equals(anEntry)){                found = true;                arrayBag[i] = null;                size--;            }            i++;        }        return found;    }    @Override    public void clear() {        Arrays.fill(arrayBag, null);        size = 0;    }    @Override    public int getFrequencyOf(T anEntry)    {        int frequenzy = 0;        for (T t : arrayBag) {            if (anEntry.equals(t)) {                frequenzy++;            }        }        return frequenzy;    }    @Override    public boolean contains(T anEntry)    {        boolean contains = false;        int i = 0;        while (!contains && i < arrayBag.length){            if (anEntry.equals(arrayBag[i])){                contains = true;            }            i++;        }        return contains;    }    @Override    public T[] toArray() {        T[] newArray = (T[]) new Object[this.size];        int j = 0;        for (int i = 0; i < arrayBag.length; i++){            if (arrayBag[i] != null){                newArray[j] = arrayBag[i];                j++;            }        }        return newArray;    }}